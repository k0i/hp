{
  "id": "01GETXD1PSP6AWCP51SB71YVK0",
  "title": "RustでEvansのwrapper commandを作ってdynamicにjsonを読み込む",
  "content": "# 3行で\r\n1. Evansでjsonファイルを用いてrequestを複数送るときresponseを次のrequestに使いたい\r\n2. 簡単なCLIをRust(Seahorse)で作ってみた\r\n3. 知見が欲しいのでコードについて御指摘頂けるととてもうれしい\r\n\r\n[es_command](https://github.com/k0i/es_command)\r\n![](https://storage.googleapis.com/zenn-user-upload/222c4205831f-20220803.gif)\r\n\r\n# これはなに?\r\n\r\n#### [Evans](https://github.com/ktr0731/evans)\r\n> ### Motivation\r\n> Evans has been created to use easier than other existing gRPC clients.\r\n> If you want to keep your product quality, you must use CI with gRPC testing, should not do use manual testing.\r\n> Evans will complete your other use cases just like:\r\n> Manually gRPC API inspection\r\nTo automate some tasks by scripting\r\nThe above use cases are corresponding to Evans's two modes, REPL mode, and CLI mode.\r\n\r\n**Evans** とても便利ですよね。\r\n\r\nこんなハイクオリティなものが無料で利用できるなんていい世の中になった。\r\n＆製作者に感謝の毎日です。\r\n\r\nそんなEvans常習者の私ですが、日常的に利用させてもらうにあたって\r\n以下のようなニーズが出てきました。\r\n\r\n#### **n番目のResponseをm番目のRequestに使いてぇ(n<m)**\r\n\r\n```json\r\n[\r\n  {\r\n    \"name\": \"createGreet\",\r\n    \"method\": \"api.v1.GreetService.CreateGreet\",\r\n    \"body\": {\r\n      \"name\": \"test\",\r\n      \"nameJp\": \"テスト\"\r\n    }\r\n  },\r\n  {\r\n    \"method\": \"api.v1.GreetService.GetGreet\",\r\n    \"body\": {\r\n    // ここで\"CreateGreet\"Response の\"greetId\"を使いたい。\r\n      \"greet_id\": \"$$createGreet.greetMessage.greetId\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nこれを達成するためにevansをwrapした簡単なCLIを作成したので、\r\n備忘録を残そうというのがこの記事の趣旨です。\r\n\r\n\r\n# 使い方\r\n### Install\r\n[GitHub Release](https://github.com/k0i/es_command/releases)でバイナリを配布しています。\r\nいずれbrewとかでもinstallできるよう挑戦予定...\r\n\r\n### Command\r\n\r\n```shell\r\nes ./json_file_path ./another_json_file_path ./yet_another_file\r\n```\r\n### Jsonファイル\r\n- SingleRequest(Object), MultiRequest(Array)どちらでも行けます\r\n\r\n- `name`,`method`,`body`にそれぞれ内容を記載します\r\n\r\n- `name` keyは省略可能です。**Responseを変数として参照したい場合のみ設ける**でOKです。\r\n\r\n- 変数として扱いたい語には`$$`を付けます\r\n\r\n- Objectへのアクセスは `Object.key`で、Arrayへのアクセスは`Array.2`のようにindex(0~)で可能です\r\n```json:multi_request.json\r\n[\r\n  {\r\n    \"name\": \"Create\",\r\n    \"method\": \"entpb.UserService.Create\",\r\n    \"body\": {\r\n      \"user\": {\r\n        \"name\": \"testUser2\",\r\n        \"email_address\": \"test2@test.com\",\r\n        \"alias\": \"test2Alias\"\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"method\": \"entpb.UserService.Get\",\r\n    \"body\": {\r\n      \"id\": \"$$Create.id\"\r\n    }\r\n  },\r\n  {\r\n    \"name\": \"Update\",\r\n    \"method\": \"entpb.UserService.Update\",\r\n    \"body\": {\r\n      \"user\": {\r\n        \"id\": \"$$Create.id\",\r\n        \"name\": \"$$Create.alias\"\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"method\": \"entpb.UserService.Delete\",\r\n    \"body\": {\r\n      \"id\": \"$$Create.id\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n# 最後に\r\n\r\nRustでとても簡単なCLIを作ってみましたが、思ったよりは簡単に作ることができました。\r\n~~メモリ効率とか全く気にせずclone()を多用してるからそれはそう~~\r\n\r\nまだまだ作ったばかりなので、玄人のソースコードを見てもっと\r\nメモリやCPU効率の良いコードになるよう頑張ります。\r\n\r\n### [ソース](https://github.com/k0i/es_command/tree/master/src)\r\n知見を増やしたいのでFBやマサカリ大募集中です。よければ見てやってください。\r\n最後まで読んでいただきありがとうございました。",
  "created_at": "2022-10-13T02:42:41Z",
  "updated_at": "2022-10-18T11:04:49Z"
}
