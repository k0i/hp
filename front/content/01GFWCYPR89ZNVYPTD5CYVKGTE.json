{"id":"01GFWCYPR89ZNVYPTD5CYVKGTE","title":"Next.jsで作ったポートフォリオをNiktoでスキャンしてResponse Header周りの設定を見直す","content":"# 3行で\r\n- EC2インスタンス上にの簡単なポートフォリオをデプロイしたので、Niktoを使ってスキャンしてみた。\r\n- 諸々の脆弱性が検出された。今回はHTTP Response Header関連を復習する。\r\n- X-XSS-Protection等の[Security Headers](https://nextjs.org/docs/advanced-features/security-headers)周りについて既に知っとるわされている方は新しい情報はないかも。\r\n\r\n\r\n# 前置き\r\n\r\n10月末に今の会社を退職&転職活動開始予定であるので簡単なポートフォリオサイトを作成中です。\r\n\r\n\r\n### ポートフォリオを何で今更作るのか\r\n1.  セキュリティの勉強中であり、VM以外で自由に攻撃できるHostが欲しい(これが一番大きい)\r\n2. ないよりはあったほうが良い。履歴書をアップロードして置いたり、今まで取り組んできた開発の内容を簡単にしたためておくことで先方に自分のイメージが伝わりやすく、また定形的な質問などに余計な時間をおかけする可能性を減らせる\r\n3. 自分の考えたくだらないこと (Slackの自分用メッセージにためておくくらいの、zennの記事にするまでもないが覚えてはおきたいこと)を蓄積できる場所が欲しかった\r\n\r\n\r\nというわけである程度形になったのでAWS EC2上に実際にデプロイして今運用しています。\r\n\r\n\r\n\r\n今回はこのポートフォリオ:`54.199.245.89`に対して、実際にNiktoを用いてスキャンして結果を見ていこうと思います。\r\n\r\n\r\n\r\n\r\n# Nikto\r\n>　(Nikto is an Open Source (GPL) web server scanner which performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files/programs, checks for outdated versions of over 1250 servers, and version specific problems on over 270 servers. It also checks for server configuration items such as the presence of multiple index files, HTTP server options, and will attempt to identify installed web servers and software. Scan items and plugins are frequently updated and can be automatically updated.)\r\n\r\nhttps://cirt.net/Nikto2\r\nhttps://github.com/sullo/nikto\r\n\r\n\r\n\r\n## インストール\r\nKali Linuxの場合Niktoはプリインストールされているようですが、自分の環境だと2.1.6と結構古いバージョンでした。\r\n\r\nまた、[GithubのWiki](https://github.com/sullo/nikto/wiki/Kali-%28Special-Notes%29)にもKaliに同梱されているものは想定とは違ったロケーションにinstallされているため、gitから直接cloneすることを推奨している記載があります。\r\n\r\nなので今回はgithubから直接リポジトリをcloneします。\r\n\r\n```shell\r\ngit clone https://github.com/sullo/nikto\r\ncd nikto/program\r\n```\r\n\r\n## 実行してみる\r\n\r\n今回はスキャンしたアウトプットをhtml形式にしてじっくり眺めてみたいと思います\r\n```shell\r\n./nikto.pl -h 54.199.245.89 -F html -o output.html\r\n```\r\n\r\n![](https://storage.googleapis.com/zenn-user-upload/dd7ea2f95e97-20221020.gif)\r\n\r\n\r\n![](https://storage.googleapis.com/zenn-user-upload/e5323650e775-20221020.png)\r\n\r\n個別のCVEについてみていくとちょっと大変 & 実は記事を書く前にあらかじめ全てのCVEについて見ており、metasploitで使えそうなものをモジュールを探してみましたが見つからず(力不足...つ、強くなりたい...)現時点で突破できそうにないので、今回はログ冒頭に出てきた以下のモノを見てみたいと思います。\r\n\r\n```shell\r\n+ /: Retrieved x-powered-by header: Next.js.\r\n+ /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\r\n+ /: Uncommon header 'x-nextjs-cache' found, with contents: HIT.\r\n+ /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/\r\n```\r\n\r\n# 検知された脆弱性\r\n## 1. X-Powered-By\r\n![](https://storage.googleapis.com/zenn-user-upload/20d1d7a8e8b3-20221020.png)\r\n\r\n\r\n> May be set by hosting environments or other frameworks and contains information about them while not providing any usefulness to the application or its visitors. Unset this header to avoid exposing potential vulnerabilities.\r\n> (Google翻訳)\r\n> ホスティング環境または他のフレームワークによって設定される可能性があり、それらに関する情報を含みますが、アプリケーションまたはその訪問者には何の有用性も提供しません。このヘッダーの設定を解除して、潜在的な脆弱性を公開しないようにします。\r\n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\r\n \r\n Next.jsだとデフォルトでOnになっているHeaderですね。\r\n そういえばOFFにしてなかった...\r\n \r\n Next.jsはバージョンについての情報は何も含まれていませんが、PHPだとバージョン情報までしっかりこのヘッダーに記載されるようです。\r\n \r\nもしバージョンが割れてしまい、更にそのバージョンに脆弱性が含まれていた場合セキュリティホールになる可能性があります。\r\n利用しているフレームワークや、言語等について積極的に明かす理由はないのでOFFにします。\r\n \r\n [next.config.json](https://nextjs.org/docs/api-reference/next.config.js/disabling-x-powered-by)に1行足せば出力無しにできます。\r\n \r\n ```json:next.config.json\r\n module.exports = {\r\n  ...\r\n  poweredByHeader: false\r\n}\r\n ```\r\n \r\n ### これをOFFにする意味がNext.jsであるのかどうか\r\n\r\n実はNext.jsはこのX-Powered-By以外にもう一つ「x-next-cache」(vercel環境だとx-vercel-cacghe)という特殊なHeaderを返却しており、このヘッダによって[cacheを管理](https://nextjs.org/docs/api-reference/next/image#caching-behavior)しています。\r\n\r\nこのヘッダを確認すれば、少なくとも「Next.jsを使っている」というX-Powered-Byと同じ情報が得られるので、X-Powered-Byをオフにする効能は実は結構薄かったりするのかなと個人的には思っています。\r\nただX-Powered-Byヘッダを機械的に探している攻撃者もいるかと思いますので、多少なりとも効果があると信じてOFFにしておきます。\r\n\r\n\r\n### Next.jsのバージョンによる脆弱性(CVE Details)\r\n[CVE Details](https://www.cvedetails.com/product/43198/Zeit-Next.js.html?vendor_id=17577)を見るに、2020年、Next.jsは`v9.3.2以前`のバージョンにて`directory traversal vulnerability`が確認されています。\r\n\r\ndynamic routingでurlからpages配下の色々なファイルへアクセスできるNext.jsですが、\r\nurlに`../../../`等といった文字列をURLエンコードして渡すと、上の階層が\r\n覗ける脆弱性がかつて存在していたようです。(ただし露見する範囲は.nextフォルダの中だけに留まる。)\r\n\r\n.nextフォルダの中の閲覧だけなのがまだ救いですが、\r\nやはり不必要に試用しているフレームワークや言語の情報を表示してしまうX-Powered-Byは攻撃の足掛かりになりそうです。\r\n\r\n## 2. Server\r\n また、Response Headerをよく見ると`Server: Apache/2.4.54 ()`というヘッダーが...\r\n 後でSSL導入と同時にnginxに挿げ替える予定ですが、httpd.confをいじれば諸々簡単にOFFにできるので OFFにしてます。\r\n \r\n ```conf\r\n...\r\n ServerTokens Prod\r\n ServerSignature Off\r\n\r\n ```\r\n\r\n## 3. X-Frame-Options, X-Content-Type-Options\r\n> X-Frame-Options は HTTP のレスポンスヘッダーで、ブラウザーがページを <frame>、<iframe>、<embed>、<object> の中に表示することを許可するかどうかを示すために使用します。サイトはコンテンツが他のサイトに埋め込まれないよう保証することで、クリックジャッキング攻撃を防ぐために使用することができます。\r\nhttps://developer.mozilla.org/ja/docs/Web/HTTP/Headers/X-Frame-Options\r\n\r\n> X-Frame-Optionsは、ウェブアプリケーションをクリックジャッキング攻撃から防御するためのヘッダです。HTTPのレスポンスヘッダに「X-Frame-Options: DENY」のように出力することで、X-Frame-Optionsに対応したブラウザにおいて、frame要素やiframe要素によるページ読み込みの制限ができます。なお、Internet Explorer 7は、X-Frame-Options ヘッダに対応していないため、本対策を実施したとしても、当該ブラウザにおいてはクリックジャッキング攻撃を防げません。\r\nhttps://www.ipa.go.jp/security/vuln/websecurity-HTML-1_9.html\r\n\r\n------\r\n\r\n> X-Content-Type-Options は HTTP のレスポンスヘッダーで、 Content-Type ヘッダーで示された MIME タイプを変更せずに従うべきであることを示すために、サーバーによって使用されるマーカーです。これにより、MIME タイプのスニッフィングを抑止することができます。言い替えれば、 MIME タイプを意図的に設定することができます。\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\r\n\r\n\r\nここらへんはよく話題にあがるやつですね。。。先人の方々がとても分かりやすくまとめてくださっており、私が書く駄文よりずっと洗練された記事がすでに多数存在しているのでURLを貼ってお茶を濁させてください。\r\n\t\r\nhttps://blog.foresta.me/posts/http-header-for-security/\r\nhttps://qiita.com/hideji2/items/1421f9bff2a97a5e5794#x-content-type-options\r\n\t\r\n```httpd.conf\r\n...\r\nHeader always append X-Frame-Options SAMEORIGIN\r\nHeader always set X-Content-Type-Options nosniff\r\n```\r\n\r\n# 気になった点\r\n- X-XSS-Protectionについても設定しておらずデフォルトの1のままでしたが、特に脆弱性として検知されませんでした。構成として完全なSSGを採用しており、ブラウザからデータベースへの書き込みは一切発生しない作りにしているから検知されなかったのか、それとも単にスキャンしていないのかはわからず....\r\n\t\r\n- CORSについても開発中なのもありとりあえず全Originを許容していますが、それについても特に何も言われませんでした。\r\n\r\n\r\n# まとめ\r\n今回Niktoでスキャンをしてみて、Headerの設定忘れに気づくことができました。\r\n他の脆弱性についても良く読み込み、どういう攻撃の足掛かりになるのかを勉強しようと思います。\r\nまた機会があれば今度はNessus等も触ってみたい。\r\n\r\n\t\r\n\t\r\n一点注意\r\n\t\r\n> `By default, Nikto scans are very “noisy,” but this behavior can be modified to perform stealthier scans.`\r\n\r\nと言われているように、デフォルトの状態でスキャンをするとログが結構大量に溢れます\r\n![](https://storage.googleapis.com/zenn-user-upload/f8a4b21f656d-20221020.png)\r\n\t*Apache access-log(全部Nikto) 実際にはこれの数倍のログが出ている*\r\n\r\nもし実際にスキャンを試してみる際は、共同のサーバ等でしたら十分に周囲の同意を得てから実施するのをお勧めします。","tags":[{"id":"01GFQYQCPXVXREHYPW375BFH18","name":"Security","created_at":"2022-10-21T04:31:43Z","updated_at":"2022-10-21T07:01:23Z"}],"created_at":"2022-10-21T04:31:43Z","updated_at":"2022-10-21T07:01:23Z"}